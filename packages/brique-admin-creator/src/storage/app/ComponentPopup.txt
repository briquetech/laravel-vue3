<template>
	<div id="{{objectName-lowercase}}-main">
		<div class="row">
			<div class="col-sm-12">
				<div class="row mb-1">
					<div class="col-sm-7">
						<div class="d-flex align-items-center mb-2">
							<h4 class="m-0 me-4">{{objectLabel-uppercase}}</h4>
							<a id="add_{{objectName-lowercase}}_btn" class="btn btn-success btn-sm" href="#" role="button" data-bs-toggle="modal" data-bs-target="#add{{objectName}}Modal">ADD</a>
						</div>
					</div>
				</div>
				<DataTableComponent :dataprops="dataprops" @view-object="view{{objectName}}" @edit-object="prepareEdit{{objectName}}" @toggle-object-status="toggle{{objectName}}"></DataTableComponent>
			</div>
		</div>
		{{addEditModal}}
		{{viewRecordModal}}
	</div>
</template>
<script>
import { useVuelidate } from '@vuelidate/core';
import { required, minValue, alphaNum, numeric, email, requiredIf, minLength } from '@vuelidate/validators';
import * as bootstrap from 'bootstrap';
function initialState(){
	return {
		id: 0,
		{{vue-addEditFields}}
		action: ""
	};
}
function initialStateValidations() {
	return {
		{{vue-addEditFieldValidations}}
	}
}
export default {
	name: "{{objectName}}master",
	props: ['current_user_id'],
	setup() {
		return {
			v$: useVuelidate()
		}
	},
	data(){
		return{
			dataprops: {
				id: '{{objectName-lowercase}}-list',
				class: 'a',
				base_url: '/api/{{objectName-lowercase}}/',
				columns: [
					{{listFields}}
				],
				data_to_send: { current_user_id: this.current_user_id } ,
				reload: false,
				search: '{{searchType}}',
				{{advancedSearchParams}}
			},
			addEditModal: null,
			readModal: null,
			currentUser: siteUserObject,
			{{objectName-lowercase}}ForAdd: initialState(),
			read{{objectName}}: {},
			{{masterVariables}}
		}
	},
	validations() {
		return {
			{{objectName-lowercase}}ForAdd: initialStateValidations()
		};
	},
	methods: {
		cancelAddEdit(event){
			this.{{objectName-lowercase}}ForAdd = initialState();
		},
		async save{{objectName}}(event){
			var thisVar = this;
			const result = await this.v$.$validate();
			if (!result) {
				thisVar.showToast("Form validation failed. Please check.", "error", "bottom", 2000);
				console.log(thisVar.v$.$errors);
				return;
			}
			if( !thisVar.{{objectName-lowercase}}ForAdd.action || thisVar.{{objectName-lowercase}}ForAdd.action == "" )
				thisVar.{{objectName-lowercase}}ForAdd.action = "details";
			$("#add{{objectName}}Modal").modal('hide');
			this.showLoading("Saving ...");
			axios.post('/{{objectName-lowercase}}/save', { {{objectName-lowercase}}: thisVar.{{objectName-lowercase}}ForAdd }).then(async function (response) {
				thisVar.closeSwal();
				var status = response.data.status;
				if( status == 1 ){
					// Ajax to submit
					thisVar.showToast('{{objectLabel}} saved successfully', 'success', 'bottom', 3000);
					setTimeout(() => {
						thisVar.dataprops.reload = true;
					}, 1500);
					thisVar.{{objectName-lowercase}}ForAdd = initialState();
					{{reloadMasters}}
				}
				else
					thisVar.showErrors("{{objectLabel}} could not be saved successfully", response.data.messages, "bottom", 3000);
			})
			.catch(function (error) {
				console.log(error);
				thisVar.closeSwal();
				thisVar.showToast("{{objectLabel}} could not be saved successfully", "error", "bottom", 3000);
			});
		},
		prepareEdit{{objectName}}({{objectName-lowercase}}){
			this.{{objectName-lowercase}}ForAdd = Object.assign({}, {{objectName-lowercase}});
			if( this.{{objectName-lowercase}}ForAdd.is_percentage == 1 )
				this.{{objectName-lowercase}}ForAdd.is_percentage = true;
			else
				this.{{objectName-lowercase}}ForAdd.is_percentage = false;
			this.addEditModal.show();
		},
		view{{objectName}}({{objectName-lowercase}}){
			this.read{{objectName}} = {{objectName-lowercase}};
			this.readModal.show();
		},
		toggle{{objectName}}({{objectName-lowercase}}, status){
			var thisVar = this;
			Swal.fire({
				icon: "question",
				html: "Do you really want to "+(status == 1?"reactivate":"deactivate")+" the {{objectLabel}} - <br/>\""+{{objectName-lowercase}}.{{uniqueColumn}}+"\"?",
				showCancelButton: true,
			}).then((result) => {
				if (result.isConfirmed) {
					thisVar.{{objectName-lowercase}}ForAdd = {{objectName-lowercase}};
					thisVar.{{objectName-lowercase}}ForAdd.status = status;
					thisVar.{{objectName-lowercase}}ForAdd.action = "status";
					thisVar.save{{objectName}}();
				}
			});
		}
	},
	async mounted() {
		this.addEditModal = new bootstrap.Modal(this.$refs.addEditModal, { backdrop: 'static', keyboard: false });
		this.readModal = new bootstrap.Modal(this.$refs.readModal, { backdrop: 'static', keyboard: false });
		{{loadMasters}}
	}
}
</script>
