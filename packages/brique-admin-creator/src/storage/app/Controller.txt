<?php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;
use Maatwebsite\Excel\Facades\Excel;

class {{objectName}}Controller extends Controller{

	//
	public function index(){
		$component = '{{objectName-lowercase}}-component';
		return view('common.index', compact('component'));
	}

	public function get(Request $request){
		$input = $request->all();
		${{objectName-lowercase}}List = \App\Models\{{objectName}}::{{withClause}}select("*");
		// SIMPLE & ADVANCED SEARCH ClAUSE
		$searchType = "simple";
		if( isset($input["search"]) )
			$searchType = $input["search"];
		if( $searchType == "simple" ){
			if( isset($input["q"]) && strlen(trim($input["q"])) > 0 ){
				${{objectName-lowercase}}List = ${{objectName-lowercase}}List->where(function($query) use ($input) {
					$query = $query->{{simpleSearchColumns}};
				});
			}
		}
		else{
			// Advanced search
			if( isset($input['advfilters']) && is_array($input['advfilters']) && count($input['advfilters']) > 0 ){
				foreach($input['advfilters'] as $filter){
					if( $filter['property'] == "__q" ){
						switch($filter['condition']){
							case 0: // NOT EQUALS
								${{objectName-lowercase}}List = ${{objectName-lowercase}}List->whereNot(function($query) use ($filter) {
									$query = $query->{{advancedSearchColumns-match}};
								});
								break;
							case 1: // EQUALS
								${{objectName-lowercase}}List = ${{objectName-lowercase}}List->where(function($query) use ($filter) {
									$query = $query->{{advancedSearchColumns-match}};
								});
								break;
							case 22: // CONTAINS
								${{objectName-lowercase}}List = ${{objectName-lowercase}}List->where(function($query) use ($filter) {
									$query = $query->{{advancedSearchColumns-like}};
								});
								break;
						}
					} 
					else{
						$condition = '=';
						$searchType = 'direct';
						switch($filter['condition']){
							case 0: $condition = "!="; break;
							case 2: case 12: $condition = "<="; break;
							case 3: case 13: $condition = ">="; break;
							case 5: case 15: $searchType = 'between'; break;
						}
						if( $searchType == 'direct' ){
							${{objectName-lowercase}}List = ${{objectName-lowercase}}List->where($filter['property'], $condition, (($filter['type'] == 'text' || $filter['type'] == 'dropdown') ? $filter['search_for_value'] : $filter['from_value']));
						}
						else if( $searchType == 'between' ){
							${{objectName-lowercase}}List = ${{objectName-lowercase}}List->where($filter['property'], '>=', $filter['from_value'])->where($filter['property'], '<=', $filter['to_value']);
						}
					}
				}
			}
		}
		// SIMPLE & ADVANCED SEARCH ClAUSE
		if( isset($input["active"]) && is_numeric($input["active"]) && $input["active"] == 1 ){
			${{objectName-lowercase}}List = ${{objectName-lowercase}}List->where('status', 1);
		}
		if( isset($input["sortBy"]) && strlen(trim($input["sortBy"])) > 0 ){
			if( trim($input["sortOrder"]) == "desc" )
				${{objectName-lowercase}}List = ${{objectName-lowercase}}List->orderByDesc(trim($input["sortBy"]));
			else
				${{objectName-lowercase}}List = ${{objectName-lowercase}}List->orderBy(trim($input["sortBy"]));
		}
		if( isset($input["page"]) )
			${{objectName-lowercase}}List = ${{objectName-lowercase}}List->paginate(10);
		else{
			if( isset($input["download"]) ){
				$export = new \App\Exports\{{objectName}}Export(${{objectName-lowercase}}List);
				switch( $input["download"] ){
					case 'XLSX':
						return Excel::download($export, '{{objectName}}List.xlsx', \Maatwebsite\Excel\Excel::XLSX);
						break;
					case 'XLS':
						return Excel::download($export, '{{objectName}}List.xlsx', \Maatwebsite\Excel\Excel::XLS);
						break;
					case 'CSV':
						return Excel::download($export, '{{objectName}}List.csv', \Maatwebsite\Excel\Excel::CSV, [
							'Content-Type' => 'text/csv',
						]);
						break;
					case 'PDF':
						return Excel::download($export, '{{objectName}}List.pdf', \Maatwebsite\Excel\Excel::TCPDF);
						break;
					case 'ODS':
						return Excel::download($export, '{{objectName}}List.ods', \Maatwebsite\Excel\Excel::ODS);
						break;
				}
			}
			else
				${{objectName-lowercase}}List = ${{objectName-lowercase}}List->get();
		}
		${{objectName-lowercase}}List->append(['actions']);
		return ${{objectName-lowercase}}List->toJson();
	}

	// Save {{objectName-lowercase}}
	public function save(Request $request){
		$input = $request->all();
		if( isset($input["{{objectName-lowercase}}"]) ){
			${{objectName-lowercase}} = $input["{{objectName-lowercase}}"];
			$objectToSave = [];
			$checkTitle = true;
			if( ${{objectName-lowercase}}["action"] == "status" ){
				$objectToSave["status"] = ${{objectName-lowercase}}["status"];
				if( ${{objectName-lowercase}}["status"] <= 0 )
					$checkTitle = false;
			}
			if( ${{objectName-lowercase}}["action"] == "details" ){
				$rules = [
					{{addRequiredColumns}}
				];
				$validator = Validator::make(${{objectName-lowercase}}, $rules);
				if ($validator->fails()) {
					return response()->json(["status" => -1, "messages" => array_merge(...array_values($validator->errors()->toArray())) ]);
				}
				$objectToSave = ${{objectName-lowercase}};
				if(!isset($objectToSave["created_by"]))
					$objectToSave["created_by"] = Auth::id();
				{{uniqueColumnPart}}
			}
			\App\Models\{{objectName}}::updateOrCreate( [ "id" => ${{objectName-lowercase}}["id"] ], $objectToSave );
			return response()->json(["status" => 1]);
		}
		else{
			return response()->json(["status" => -100, "messages" => ["Data for {{objectName}} is missing."]]);
		}
	}
}
